{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# --------------------------\n",
        "# Step 1: Import Libraries\n",
        "# --------------------------\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import OrdinalEncoder\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
        "from xgboost import XGBRegressor\n",
        "import pickle\n"
      ],
      "metadata": {
        "id": "Kv6dp8naYfLV"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# --------------------------\n",
        "# Step 2: Load Dataset\n",
        "# --------------------------\n",
        "data = pd.read_csv(\"crop_production.csv\")\n",
        "data.columns = data.columns.str.strip()  # clean column names\n",
        "\n",
        "# Drop missing values\n",
        "data = data.dropna()\n",
        "\n",
        "# Create target variable: Yield\n",
        "data[\"Yield\"] = data[\"Production\"] / data[\"Area\"]\n",
        "\n",
        "# Select features\n",
        "features = [\"State_Name\", \"District_Name\", \"Crop_Year\", \"Season\", \"Crop\"]\n",
        "X = data[features]\n",
        "y = data[\"Yield\"]"
      ],
      "metadata": {
        "id": "aqv15La5Yi3O"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# --------------------------\n",
        "# Step 3: Encode Categorical Data\n",
        "# --------------------------\n",
        "categorical_cols = [\"State_Name\", \"District_Name\", \"Season\", \"Crop\"]\n",
        "encoder = OrdinalEncoder(handle_unknown=\"use_encoded_value\", unknown_value=-1)\n",
        "X[categorical_cols] = encoder.fit_transform(X[categorical_cols])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u09oo3RMYoex",
        "outputId": "78f7120f-27f9-442c-a837-5c768c9660c9"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-2301708049.py:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  X[categorical_cols] = encoder.fit_transform(X[categorical_cols])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --------------------------\n",
        "# Step 4: Train-Test Split\n",
        "# --------------------------\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.2, random_state=42\n",
        ")"
      ],
      "metadata": {
        "id": "ytL83LDPYrwB"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# --------------------------\n",
        "# Step 5: Train XGBoost Model\n",
        "# --------------------------\n",
        "model = XGBRegressor(\n",
        "    n_estimators=200,\n",
        "    max_depth=6,\n",
        "    learning_rate=0.1,\n",
        "    random_state=42,\n",
        "    objective=\"reg:squarederror\"\n",
        ")\n",
        "\n",
        "model.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        },
        "id": "hjV0sfmCYvon",
        "outputId": "9f96fb49-200d-401f-d2d6-d32568bcc28f"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
              "             colsample_bylevel=None, colsample_bynode=None,\n",
              "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "             feature_weights=None, gamma=None, grow_policy=None,\n",
              "             importance_type=None, interaction_constraints=None,\n",
              "             learning_rate=0.1, max_bin=None, max_cat_threshold=None,\n",
              "             max_cat_to_onehot=None, max_delta_step=None, max_depth=6,\n",
              "             max_leaves=None, min_child_weight=None, missing=nan,\n",
              "             monotone_constraints=None, multi_strategy=None, n_estimators=200,\n",
              "             n_jobs=None, num_parallel_tree=None, ...)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
              "             colsample_bylevel=None, colsample_bynode=None,\n",
              "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "             feature_weights=None, gamma=None, grow_policy=None,\n",
              "             importance_type=None, interaction_constraints=None,\n",
              "             learning_rate=0.1, max_bin=None, max_cat_threshold=None,\n",
              "             max_cat_to_onehot=None, max_delta_step=None, max_depth=6,\n",
              "             max_leaves=None, min_child_weight=None, missing=nan,\n",
              "             monotone_constraints=None, multi_strategy=None, n_estimators=200,\n",
              "             n_jobs=None, num_parallel_tree=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>XGBRegressor</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://xgboost.readthedocs.io/en/release_3.0.0/python/python_api.html#xgboost.XGBRegressor\">?<span>Documentation for XGBRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
              "             colsample_bylevel=None, colsample_bynode=None,\n",
              "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "             feature_weights=None, gamma=None, grow_policy=None,\n",
              "             importance_type=None, interaction_constraints=None,\n",
              "             learning_rate=0.1, max_bin=None, max_cat_threshold=None,\n",
              "             max_cat_to_onehot=None, max_delta_step=None, max_depth=6,\n",
              "             max_leaves=None, min_child_weight=None, missing=nan,\n",
              "             monotone_constraints=None, multi_strategy=None, n_estimators=200,\n",
              "             n_jobs=None, num_parallel_tree=None, ...)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --------------------------\n",
        "# Step 6: Evaluate Model\n",
        "# --------------------------\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "rmse = np.sqrt(mse)\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(\"\\n📊 Model Performance Metrics\")\n",
        "print(f\"RMSE: {rmse:.4f}\")\n",
        "print(f\"MAE: {mae:.4f}\")\n",
        "print(f\"R² Score: {r2:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K-G5DkWkZJT9",
        "outputId": "7add175e-16d6-4ad9-a524-f2da2170796b"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "📊 Model Performance Metrics\n",
            "RMSE: 262.2929\n",
            "MAE: 15.4877\n",
            "R² Score: 0.8728\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --------------------------\n",
        "# Step 7: Plot Actual vs Predicted\n",
        "# --------------------------\n",
        "plt.figure(figsize=(7, 7))\n",
        "plt.scatter(y_test, y_pred, alpha=0.5, color='green')\n",
        "plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--', linewidth=2)\n",
        "plt.xlabel(\"Actual Yield\")\n",
        "plt.ylabel(\"Predicted Yield\")\n",
        "plt.title(\"Actual vs Predicted Crop Yield\")\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 641
        },
        "id": "OU-fQa-DZO2M",
        "outputId": "88b7ff38-6c01-4d03-c5ee-3f8c409a0a51"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x700 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAnsAAAJwCAYAAADx86dUAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAk8RJREFUeJzs3Xd8VFX+xvHP9PQESEjoIFIVQUQQRVRAQFEXdBWsiFgXRGXVFQuKYl8bNpb1Z6+ggEpREBR1QZCiIh0FQktIgPRk6v39cc1ASIAEkkwmed6+eDnn3puZ78xNyMO595xjMQzDQERERERqJWuoCxARERGRqqOwJyIiIlKLKeyJiIiI1GIKeyIiIiK1mMKeiIiISC2msCciIiJSiynsiYiIiNRiCnsiIiIitZjCnoiIiEgtprAnIlXCYrHwyCOPhLqMkDv33HM599xzg+2tW7disVh4++23Q1bToQ6tsS555JFHsFgsx/S1119/PS1btjzqcTXxnEvdorAnEgZee+01LBYLPXr0OObn2LVrF4888gi//PJL5RVWw3333XdYLJbgH4fDwQknnMB1113Hn3/+GeryKmTx4sU88sgjZGVlhbQOv9/PW2+9xbnnnkv9+vVxuVy0bNmSESNGsHz58pDWVuzjjz/GYrHwn//8p8z9t912Gw6Hg19//bWaKxMJDYU9kTDwwQcf0LJlS5YtW8bmzZuP6Tl27drFhAkT6lTYKzZmzBjee+89pkyZwqBBg/jkk084/fTT2bVrV7XX0qJFCwoLC7n22msr9HWLFy9mwoQJIQ17hYWFXHTRRdxwww0YhsH999/P66+/znXXXceSJUvo3r07O3bsCFl9xYYNG8bAgQO57777SE9PL7Fv2bJlTJkyhbvuuovOnTvz4IMPUlhYGKJKRaqHwp5IDbdlyxYWL17M888/T1JSEh988EGoSwo7Z599Ntdccw0jRozg5Zdf5t///jf79u3jnXfeOezX5OfnV0ktFouFiIgIbDZblTx/Vbrnnnv46quveOGFF1i0aBF33303N9xwA48++ihr1qzhmWeeOeLXV9VnWpbXX38dj8fDXXfdFdzm9/u55ZZbaN68efAWA7vdTkRERLXVJRIKCnsiNdwHH3xAvXr1GDRoEH//+98PG/aysrK46667aNmyJS6Xi6ZNm3LdddeRmZnJd999x+mnnw7AiBEjgpc1i+8hatmyJddff32p5zz0Xi6Px8P48eM57bTTiI+PJzo6mrPPPptvv/22wu8rPT0du93OhAkTSu3bsGEDFouFV155BQCv18uECRNo06YNERERNGjQgF69ejF//vwKvy5Anz59ADNIw4H7ttauXctVV11FvXr16NWrV/D4999/n9NOO43IyEjq16/PsGHD2L59e6nnnTJlCq1btyYyMpLu3bvzww8/lDrmcPdvrV+/niuuuIKkpCQiIyNp164dDzzwQLC+e+65B4BWrVoFz9/WrVurpMay7Nixg//85z+cf/753HnnnaX222w27r77bpo2bRqs+XCfqc/n47HHHqN169bBy8D3338/bre7xHO2bNmSiy66iHnz5tGlSxciIiLo2LEj06dPP2q9LVu25JFHHuGjjz4Kfp9MmjSJX375hddff52oqKgSdR6qvJ/nobKysrj++uuJj48nISGB4cOHh/zSu4jCnkgN98EHH3DppZfidDq58sor2bRpEz///HOJY/Ly8jj77LN5+eWX6d+/Py+99BK33nor69evZ8eOHXTo0IFHH30UgJtvvpn33nuP9957j969e1eolpycHN544w3OPfdcnn76aR555BEyMjIYMGBAhS8PJycnc8455zB16tRS+z755BNsNhuXX345YP5CnjBhAueddx6vvPIKDzzwAM2bN2flypUVes1if/zxBwANGjQosf3yyy+noKCAJ554gptuugmAxx9/nOuuu442bdrw/PPPc+edd7JgwQJ69+5d4pf4//3f/3HLLbeQkpLCM888w1lnncUll1xSroDw22+/0aNHDxYuXMhNN93ESy+9xODBg/nyyy8BuPTSS7nyyisBeOGFF4LnLykpqdpqnDt3Lj6fr8KXn8v6TG+88UbGjx9P165deeGFFzjnnHN48sknGTZsWKmv37RpE0OHDuWCCy7gySefxG63c/nll5cr6Bdfqr3tttvYvHkz48ePD17iPZLyfp6HMgyDv/3tb7z33ntcc801TJw4kR07djB8+PCj1ipSpQwRqbGWL19uAMb8+fMNwzCMQCBgNG3a1LjjjjtKHDd+/HgDMKZPn17qOQKBgGEYhvHzzz8bgPHWW2+VOqZFixbG8OHDS20/55xzjHPOOSfY9vl8htvtLnHM/v37jeTkZOOGG24osR0wHn744SO+v//85z8G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pUsX0tLSaNiwIV26dMFisZS5YobFYsHv91d6kSIiUgH5+XDJJbBwodnOzoZduxT2ROqocoW9LVu2kJSUFHwsIiI1VG4uDBoEP/xgtmNjYe5cOOus0NYlIiFTrrDXokULzjzzTN59911O1L8MRURqpuxsuOACWLLEbMfHm5dwe/QIbV0iElLlnmevadOmdOnShVdffbUq6xERkWOxfz/063cg6NWvDwsWKOiJSPnD3tSpU3nrrbd49NFH6devHzt27KjKukREpLwyM6FPH1i+3GwnJpr36512WmjrEpEaoUJTr1x++eWce+65jBo1ik6dOnHttddit5d8iueff75SCxQRkaOYMQN++cV8nJxs9uiddFJISxKRmqPC8+zVr1+fDh06MGPGDFatWlUi7FkslkotTkREyuGmm2DnTpgyxezRa98+1BWJSA1SobC3Zs0arrvuOvbt28e8efO0Fq6ISE3x8MMwerR5CVdE5CDlvmfvqaee4rTTTqNz58789ttvCnoiIqGSmnpgDr1iFouCnoiUqdw9ey+99BLTpk3j4osvrsp6RETkSP780xyMkZ4Os2ebj0VEjqDcYe/333+nQYMGVVmLiIgcyaZNZrgrng3hnnvg55/BWu6LNCJSB5X7bwgFPRGREFq3Ds4550DQ69jR7NlT0BORo9DfEiIiNd3vv8O558Lu3Wb7lFPgu+8gJSWUVYlImFDYExGpyX75xQx6e/aY7a5dzcEZf61XLiJyNAp7IiI11fLl5j16e/ea7e7dzQmTdVuNiFRAuQZo5OTklPsJ4+LijrkYERH5S24uXHCBueYtwJlnwty5oL9jRaSCyhX2EhISyr06ht/vP66CREQEiI2F11+HYcPgrLPMwRgxMaGuSkTCULnC3rfffht8vHXrVu677z6uv/56evbsCcCSJUt45513ePLJJ6umShGRuujvfzd78848E6KjQ12NiISpcoW9c845J/j40Ucf5fnnn+fKK68Mbrvkkkvo1KkTU6ZMYfjw4ZVfpYhIXbB9OzRrVnLb+eeHphYRqTUqPEBjyZIldOvWrdT2bt26sWzZskopSkSkzpk9G9q0gddeC3UlIlLLVDjsNWvWjP/+97+ltr/xxhs0O/RfpCIicnQzZ8KQIeB2w6hRMG9eqCsSkVqk3MulFXvhhRe47LLLmDt3Lj169ABg2bJlbNq0ic8++6zSCxQRqdWmTYOrrgKfz2wPG6b1bkWkUlW4Z+/CCy9k48aNXHzxxezbt499+/Zx8cUXs3HjRi688MKqqFFEpHb68EMz3BUHvWuvhfffB3uF/x0uInJYx/Q3SrNmzXjiiScquxYRkbrjnXdgxAgwDLM9ciT85z9gs4W2LhGpdY5pBY0ffviBa665hjPPPJOdO3cC8N577/Hjjz9WanEiIrXSf/9bMujdeitMmaKgJyJVosJh77PPPmPAgAFERkaycuVK3G43ANnZ2ertExE5mv/+F26++UDQGzPGHIFr1eqVIlI1Kvy3y8SJE5k8eTL//e9/cTgcwe1nnXUWK1eurNTiRERqnW7dICHBfHz33fDii1DOFYpERI5Fhe/Z27BhA7179y61PT4+nqysrMqoSUSk9jr1VHNqla++ggcfVNATkSpX4bCXkpLC5s2badmyZYntP/74IyeccEJl1SUiUnsYRslQd/rp5h8RkWpQ4cu4N910E3fccQdLly7FYrGwa9cuPvjgA+6++25uu+22qqhRRCQ8GQY89BDcdtuBe/RERKpZhXv27rvvPgKBAH379qWgoIDevXvjcrm4++67uf3226uiRhGR8GMYcN998MwzZtvlgpdeCm1NIlInVTjsWSwWHnjgAe655x42b95MXl4eHTt2JCYmpirqExEJP4YBY8eagy+KtWkTsnJEpG6r8GXcG264gdzcXJxOJx07dqR79+7ExMSQn5/PDTfcUBU1ioiEj0AARo8uGfT+8x9zm4hICFQ47L3zzjsUFhaW2l5YWMi7775bKUWJiISlQABuucWcNw/MQRlvvmnOqyciEiLlvoybk5ODYRgYhkFubi4RERHBfX6/nzlz5tCwYcMqKVJEpMbz++GGG6D4H71Wq7kk2jXXhLYuEanzyh32EhISsFgsWCwW2rZtW2q/xWJhwoQJlVqciEhY8Pnguuvgo4/Mts0GH34IV1wR2rpERKhA2Pv2228xDIM+ffrw2WefUb9+/eA+p9NJixYtaNy4cZUUKSJSo2VlwYoV5mOHAz75BIYMCWlJIiLFyh32zjnnHAC2bNlC8+bNsWjWdxERU2IiLFwIAwbAU0/BRReFuiIRkaAKT72ycOFCYmJiuPzyy0tsnzZtGgUFBQwfPrzSihMRCRtNmsAvv4C9wn+tiohUqQqPxn3yySdJTEwstb1hw4Y88cQTlVKUiEiNVlAA48aZ/z+Ygp6I1EAVDnupqam0atWq1PYWLVqQmppaKUWJiNRYeXkwaJB5uXbwYCgqCnVFIiJHVOGw17BhQ3777bdS23/99VcaNGhwzIU89dRTWCwW7rzzzuC2oqIiRo0aRYMGDYiJieGyyy4jPT29xNelpqYyaNAgoqKiaNiwIffccw8+n6/EMd999x1du3bF5XJx4okn8vbbb5d6/VdffZWWLVsSERFBjx49WLZs2TG/FxGpnewFBdguugi++87csHQpbNwY0ppERI6mwmHvyiuvZMyYMXz77bf4/X78fj8LFy7kjjvuYNiwYcdUxM8//8x//vMfTjnllBLb77rrLr788kumTZvGokWL2LVrF5deemlwv9/vZ9CgQXg8HhYvXsw777zD22+/zfjx44PHbNmyhUGDBnHeeefxyy+/cOedd3LjjTfy9ddfB4/55JNPGDt2LA8//DArV66kc+fODBgwgD179hzT+xGRWigri56PPIJ18WKznZAA8+fDIX9viYjUOEYFud1u44orrjAsFovhcDgMh8Nh2Gw2Y8SIEYbb7a7o0xm5ublGmzZtjPnz5xvnnHOOcccddxiGYRhZWVmGw+Ewpk2bFjx23bp1BmAsWbLEMAzDmDNnjmG1Wo20tLTgMa+//roRFxcXrOXee+81TjrppBKvOXToUGPAgAHBdvfu3Y1Ro0YF236/32jcuLHx5JNPlvt9ZGdnG4CRnZ1d/jdfQR6Px5g5c6bh8Xiq7DWk6uj8hbG9ew1/166GYa56axj16xvGihWhrkoqQD9/4U3nr2zlzR4VvpvY6XTyySef8Nhjj/Hrr78SGRlJp06daNGixTGFzVGjRjFo0CD69evHxIkTg9tXrFiB1+ulX79+wW3t27enefPmLFmyhDPOOIMlS5bQqVMnkpOTg8cMGDCA2267jTVr1nDqqaeyZMmSEs9RfEzx5WKPx8OKFSsYN25ccL/VaqVfv34sWbLksHW73W7cbnewnZOTA4DX68Xr9R7TZ3E0xc9bVc8vVUvnL0xlZmIfOBDrX7evGImJ+L76Cjp1Ap3LsKGfv/Cm81e28n4exzx0rG3btmWupFERH3/8MStXruTnn38utS8tLQ2n00lCQkKJ7cnJyaSlpQWPOTjoFe8v3nekY3JycigsLGT//v34/f4yj1m/fv1ha3/yySfLXDFk3rx5REVFHfbrKsP8+fOr9Pmlaun8hQ9XVhZnjh9P3F+Dz4oSElj88MPk7tgBO3aEuDo5Fvr5C286fyUVHDojwGGUK+yNHTuWxx57jOjoaMaOHXvEY59//vlyvfD27du54447mD9/fol1dsPFuHHjSnwWOTk5NGvWjP79+xMXF1clr+n1epk/fz7nn38+DoejSl5Dqo7OX/ix3n47tr+CXqBRI/734IP0vP56nb8wpJ+/8KbzV7biq4pHU66wt2rVqmBX4apVqw57XEVW1VixYgV79uyha9euwW1+v5/vv/+eV155ha+//hqPx0NWVlaJ3r309HRSUlIASElJKTVqtni07sHHHDqCNz09nbi4OCIjI7HZbNhstjKPKX6OsrhcLlwuV6ntDoejyr8Rq+M1pOro/IWRF16ATZtg82b8X39N3oYNOn9hTucvvOn8lVTez6JcYe/bb78t8/Hx6Nu3L6tXry6xbcSIEbRv355//etfNGvWDIfDwYIFC7jssssA2LBhA6mpqfTs2ROAnj178vjjj7Nnzx4aNmwImF28cXFxdOzYMXjMnDlzSrzO/Pnzg8/hdDo57bTTWLBgAYMHDwYgEAiwYMECRo8eXSnvVUTCVGQkfPEF7N0LjRrBhg2hrkhEpMJCNt17bGwsJ598colt0dHRNGjQILh95MiRjB07lvr16xMXF8ftt99Oz549OeOMMwDo378/HTt25Nprr+WZZ54hLS2NBx98kFGjRgV73W699VZeeeUV7r33Xm644QYWLlzI1KlTmT17dvB1x44dy/Dhw+nWrRvdu3fnxRdfJD8/nxEjRlTTpyEiNcIff4DLBU2bHtgWHW3+0Y3hIhKmyhX2Dp7b7mimT59+zMUc6oUXXsBqtXLZZZfhdrsZMGAAr732WnC/zWZj1qxZ3HbbbfTs2ZPo6GiGDx/Oo48+GjymVatWzJ49m7vuuouXXnqJpk2b8sYbbzBgwIDgMUOHDiUjI4Px48eTlpZGly5d+Oqrr0oN2hCRWmzDBujTxwx2ixaZPXkiIrVAucJefHx88LFhGMyYMYP4+Hi6desGmPffZWVlVSgUluW74lnp/xIREcGrr77Kq6++etivadGiRanLtIc699xzj3ivIcDo0aN12Vakrlq71gx6xffujhkD06aFtiYRkUpSrrD31ltvBR//61//4oorrmDy5MnYbDbAHFjxj3/8o8pGoYqIVJnffoN+/SAjw2x36QKvvx7SkkREKlOFl0t78803ufvuu4NBD8zLqWPHjuXNN9+s1OJERKrUypVw3nkHgl63brBgASQmhrYuEZFKVOGw5/P5ypxseP369QQCgUopSkSkyi1bBn37wr59ZvuMM+Cbb6B+/dDWJSJSySo8GnfEiBGMHDmSP/74g+7duwOwdOlSnnrqKY1eFZHwsHgxDBwIublmu1cvmD0bdCuKiNRCFQ57//73v0lJSeG5555j9+7dADRq1Ih77rmHf/7zn5VeoIhIpdq0Cfr3h/x8s33eeeZcejExoa1LRKSKVPgyrtVq5d5772Xnzp1kZWWRlZXFzp07uffee0vcxyciUiOdeCIMH24+Pv98mDVLQU9EarUKhz0w79v75ptv+Oijj4JLpO3atYu8vLxKLU5EpNJZLPDyy/DKK2aPXlRUqCsSEalSFb6Mu23bNgYOHEhqaiput5vzzz+f2NhYnn76adxuN5MnT66KOkVEjl1eXsneO6sVRo0KXT0iItWowj17d9xxB926dWP//v1ERkYGtw8ZMoQFCxZUanEiIsdtxgw44QRYsSLUlYiIhESFe/Z++OEHFi9ejNPpLLG9ZcuW7Ny5s9IKExE5blOnwlVXgd9v3p+3fLkZ/ERE6pAK9+wFAgH8fn+p7Tt27CA2NrZSihIROW7vvw9XXmkGPYCLL4YWLUJbk4hICFQ47PXv358XX3wx2LZYLOTl5fHwww9z4YUXVmZtIiLH5q234LrroHii9xtvNLdpxgARqYOOaZ69gQMH0rFjR4qKirjqqqvYtGkTiYmJfPTRR1VRo4hI+f3nP3DrrQfa//iHOfrWekyTD4iIhL0Kh71mzZrx66+/8sknn/Drr7+Sl5fHyJEjufrqq0sM2BARqXYvvwxjxhxo33knPP+8Od2KiEgdVaGw5/V6ad++PbNmzeLqq6/m6quvrqq6REQq5vnn4eBVfO69F556SkFPROq8Cl3XcDgcFBUVVVUtIiLHLjr6wOMHH1TQExH5S4Uv444aNYqnn36aN954A7u9wl8uIlI1brkFvF7Yvx8eeijU1YiI1BgVTms///wzCxYsYN68eXTq1Inog/81DUyfPr3SihMRqZDRo0NdgYhIjVPhsJeQkMBll11WFbWIiJSPYcB990HXrjB0aKirERGp0Soc9t56662qqENEpHwMwxxlO2mSOW+e0wlDhoS6KhGRGqvcAzQCgQBPP/00Z511Fqeffjr33XcfhYWFVVmbiEhJgYA5b96kSQfae/eGtiYRkRqu3GHv8ccf5/777ycmJoYmTZrw0ksvMWrUqKqsTUTkAL8fbroJJk8221aruSrGjTeGti4RkRqu3GHv3Xff5bXXXuPrr79m5syZfPnll3zwwQcEipcjEhGpKj4fXH89vPmm2bbZ4L33YPjwkJYlIhIOyh32UlNTS6x9269fPywWC7t27aqSwkREAHM6lWuugfffN9t2O3z0EVx1VWjrEhEJE+UeoOHz+YiIiCixzeFw4PV6K70oEREAPB648koontLJ4YCpU2Hw4JCWJSISTsod9gzD4Prrr8flcgW3FRUVceutt5aYa0/z7IlIpVmzBubONR+7XPDZZzBoUGhrEhEJM+UOe8PLuDfmmmuuqdRiRERKOPVU+Pxzcy69jz+G/v1DXZGISNgpd9jT/HoiEhLnnw9btkB8fKgrEREJS+UeoCEiUuXy8g6MuD2Ygp6IyDGr8AoaIiJVIicHLrgAFi+GnTvhoYdCXZGISK2gnj0RCb39+83LtYsXm+0XXoC0tNDWJCJSSyjsiUho7d0L/frBsmVmu0EDWLgQUlJCW5eISC2hy7giEjp79pg9er/9ZrYbNoQFC+Dkk0Nbl4hILaKwJyKhsXu32aO3dq3ZbtTI7NFr3z60dYmI1DIKeyJS/XbuhD59YONGs920qRn02rQJbV0iIrWQ7tkTkep3zTUHgl6LFrBokYKeiEgVUdgTkeo3ZYp52faEE8ygd8IJoa5IRKTW0mVcEal+bdqYl21jYsxLuCIiUmUU9kSk6m3bBo0bg8NxYJsGYoiIVAtdxhWRqrVmDfToYd6n5/OFuhoRkTpHYU9Eqs6vv8K550J6OkydCo89FuqKRETqHIU9EakaK1bAeedBZqbZPv10uPPOkJYkIlIXKeyJSOVbuhT69jXXvAXo2RPmz4d69UJbl4hIHaSwJyKV68cfzSXQsrPN9tlnw9dfQ3x8aOsSEamjFPZEpPJ89x0MHAi5uWa7Tx+YOxdiY0NalohIXaawJyKVY/FiuPBCyM832/37w6xZEB0d2rpEROo4hT0RqRwdO0KHDubjQYPg888hMjK0NYmIiMKeiFSShARzEMY998D06RAREeqKREQEraAhIsfD7web7UC7fn145pnQ1SMiIqWoZ09Ejs1HH8GZZ0JWVqgrERGRI1DYE5GKe/ddc/mzZctgwADIywt1RSIichgKeyJSMf/3f3D99RAImO1TT4WoqJCWJCIih6ewJyLl9/rrcOONYBhm+/bbzW1W/VUiIlJT6W9oESmfl16Cf/zjQHvsWHObxRK6mkRE5KgU9kTk6J59Fu6880B73Dj4978V9EREwoDCnogc2cSJcO+9B9oPPwyPP66gJyISJjTPnogcXiAAv/9+oP3443D//aGrR0REKkxhT0QOz2qF994Drxd69oS77w51RSIiUkEKeyJyZA4HTJumEbciImFKf3uLyAGBADz0EGzcWHK7gp6ISNjS3+AiYgoE4LbbzAEZffrAH3+EuiIREakECnsiAn4/jBwJU6aY7d27YeXK0NYkIiKVQvfsidR1Ph8MHw4ffmi2bTZ4/324/PLQ1iUiIpVCYU+kLvN64eqrzQEYAHY7fPwxXHZZaOsSEZFKo7AnUle53TBsGMycabadTvj0U7j44pCWJSIilUthT6QuKiqCv/8dZs822y4XzJgBF1wQ2rpERKTSKeyJ1EUzZhwIepGR8MUX0K9faGsSEZEqodG4InXRlVfC+PEQHQ1z5yroiYjUYgp7InXVI4+Y696ec06oKxERkSqksCdSF2Rnw//+V3KbxQItW4akHBERqT4KeyK13f795mXafv3g229DXY2IiFQzhT2R2iwz01z6bPlycwTuDTeAxxPqqkREpBppNK5IbbVnD/Tta96XB5CcDLNmmfPpiYhInaGwJ1Ib7d5tBr1168x2o0awcCG0bx/aukREpNop7InUNjt2mJduN20y282amUHvxBNDW5eIiISE7tkTqU22bTOnUikOei1bwqJFCnoiInWYwp5IbeF2m5du//zTbLdubQa9Vq1CW5eIiISUwp5IbeFywRNPgNUKbduaQa9581BXJSIiIaZ79kRqkyuuMENfjx6QkhLqakREpAZQ2BMJZ/v3Q716Jbf97W+hqUVERGokXcYVCVerVpmXaydPDnUlIiJSgynsiYSjn382p1fJzITbboMZM0JdkYiI1FAKeyLhZskSc53brCyzfdZZ5ihcERGRMijsiYSTH36A/v0hJ8dsn3MOfPUVxMWFti4REamxFPZEwsXChTBwIOTlme1+/WDOHIiJ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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --------------------------\n",
        "# Step 8: Custom Input Prediction\n",
        "# --------------------------\n",
        "custom_data = pd.DataFrame({\n",
        "    \"State_Name\": [\"Karnataka\"],\n",
        "    \"District_Name\": [\"Bangalore\"],  # unseen handled by encoder\n",
        "    \"Crop_Year\": [2013],\n",
        "    \"Season\": [\"Kharif\"],\n",
        "    \"Crop\": [\"Rice\"]\n",
        "})\n",
        "\n",
        "custom_data[categorical_cols] = encoder.transform(custom_data[categorical_cols])\n",
        "predicted_yield = model.predict(custom_data)[0]\n",
        "\n",
        "print(f\"\\n🌱 Predicted Yield for custom input: {predicted_yield:.4f} tons/hectare\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gsFMdsxUZVAH",
        "outputId": "d58720dc-8b0b-4fc5-a291-f26867782d73"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "🌱 Predicted Yield for custom input: 2.2196 tons/hectare\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Save XGBoost model\n",
        "with open(\"xgb_crop_yield_model.pkl\", \"wb\") as f:\n",
        "    pickle.dump(model, f)\n",
        "\n",
        "# Save OrdinalEncoder (needed to encode user input)\n",
        "with open(\"encoder.pkl\", \"wb\") as f:\n",
        "    pickle.dump(encoder, f)\n",
        "\n",
        "print(\"✅ Model and encoder saved successfully!\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3BXmEVYEZu4b",
        "outputId": "f76556f0-4a4c-4273-8ba6-bb4391c68b03"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Model and encoder saved successfully!\n"
          ]
        }
      ]
    }
  ]
}